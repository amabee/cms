<?php
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, GET, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

include('conn.php');

class Patients
{
  private $conn;

  public function __construct()
  {
    $this->conn = DatabaseConnection::getInstance()->getConnection();
  }

  public function registerPatient($json)
  {
    $data = json_decode($json, true);

    if (empty($data['first_name']) || empty($data['last_name'])) {
      return json_encode(['error' => 'First and last name are required']);
    }

    $this->conn->beginTransaction();

    try {
      $user_id = null;

      // If password provided, create a user account. Username will be autogenerated from email if not provided.
      if (!empty($data['password'])) {
        if (empty($data['email'])) {
          return json_encode(['error' => 'Email is required when creating an account']);
        }

        // generate username from email local part
        $email = $data['email'];
        $local = strtolower(preg_replace('/[^a-z0-9._-]/', '', strstr($email, '@', true) ?: $email));
        $baseUsername = $local ?: 'user';
        $username = $baseUsername;

        // ensure uniqueness by appending number suffix if needed
        $i = 0;
        while (true) {
          $check = $this->conn->prepare('SELECT user_id FROM users WHERE username = :username LIMIT 1');
          $check->execute([':username' => $username]);
          if ($check->rowCount() === 0) break;
          $i++;
          $username = $baseUsername . $i;
        }

        $passwordHash = password_hash($data['password'], PASSWORD_BCRYPT);
        $stmt = $this->conn->prepare("INSERT INTO users (usertype_id, username, password_hash, email, status) 
                                          VALUES (5, :username, :password, :email, 'active')");
        $stmt->execute([
          ':username' => $username,
          ':password' => $passwordHash,
          ':email' => $data['email'] ?? null
        ]);
        $user_id = $this->conn->lastInsertId();
      }

      if ($user_id) {
        $stmt = $this->conn->prepare("INSERT INTO user_profiles (user_id, first_name, last_name, gender, birth_date, address, phone)
                                          VALUES (:user_id, :first_name, :last_name, :gender, :birth_date, :address, :phone)");
        $stmt->execute([
          ':user_id' => $user_id,
          ':first_name' => $data['first_name'],
          ':last_name' => $data['last_name'],
          ':gender' => $data['gender'] ?? null,
          ':birth_date' => $data['birth_date'] ?? null,
          ':address' => $data['address'] ?? null,
          ':phone' => $data['phone'] ?? null
        ]);
      }

      $patient_code = 'P' . str_pad(rand(1, 9999), 4, '0', STR_PAD_LEFT);
      $stmt = $this->conn->prepare("INSERT INTO patients (user_id, patient_code, blood_type, emergency_contact, insurance_id)
                                      VALUES (:user_id, :patient_code, :blood_type, :emergency_contact, :insurance_id)");
      $stmt->execute([
        ':user_id' => $user_id,
        ':patient_code' => $patient_code,
        ':blood_type' => $data['blood_type'] ?? null,
        ':emergency_contact' => $data['emergency_contact'] ?? null,
        ':insurance_id' => $data['insurance_id'] ?? null
      ]);

      $this->conn->commit();

      return json_encode(['success' => true, 'patient_code' => $patient_code]);
    } catch (PDOException $e) {
      $this->conn->rollBack();
      return json_encode(['error' => 'Database Error: ' . $e->getMessage()]);
    }
  }


}

$patients = new Patients();

if (in_array($_SERVER['REQUEST_METHOD'], ['GET', 'POST'])) {
  $operation = $_REQUEST['operation'] ?? '';
  $json = $_REQUEST['json'] ?? '';

  switch ($operation) {
    case 'register':
      echo $patients->registerPatient($json);
      break;
    default:
      echo json_encode(['error' => 'Invalid Operation']);
      break;
  }
} else {
  echo json_encode(['error' => 'Invalid Request Method']);
}
?>

